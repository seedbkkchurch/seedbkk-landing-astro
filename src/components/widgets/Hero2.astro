---
import Image from '~/components/common/Image.astro'
import Button from '~/components/ui/Button.astro'

import type { Hero as Props } from '~/types'

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props
---

<section class="not-prose relative md:-mt-[76px]" {...id ? { id } : {}}>
  <div class="pointer-events-none absolute inset-0" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative mx-auto max-w-7xl px-4 sm:px-6">
    <div class="pointer-events-none pt-0 md:pt-[76px]"></div>
    <div class="py-12 md:py-20 lg:flex lg:h-screen lg:items-center lg:gap-8 lg:py-0">
      <div class="mx-auto basis-1/2 pb-10 text-center md:pb-16 lg:text-left">
        {
          tagline && (
            <p
              class="intersect-once intersect-quarter text-base font-bold uppercase tracking-wide text-secondary dark:text-blue-200 motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="leading-tighter intersect-once intersect-quarter mb-4 font-heading text-5xl font-bold tracking-tighter dark:text-gray-200 md:text-6xl motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={title}
            />
          )
        }
        <div class="mx-auto max-w-3xl lg:max-w-none">
          {
            subtitle && (
              <p
                class="intersect-once intersect-quarter mb-6 text-xl text-muted dark:text-slate-300 motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={subtitle}
              />
            )
          }

          {
            actions && (
              <div class="intersect-once intersect-quarter m-auto flex max-w-xs flex-col flex-nowrap gap-4 sm:max-w-md sm:flex-row sm:justify-center motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade lg:m-0 lg:max-w-7xl lg:justify-start">
                {Array.isArray(actions) ? (
                  actions.map(action => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div class="basis-1/2">
        {
          image && (
            <div class="intersect-once intercept-no-queue intersect-quarter relative m-auto max-w-5xl motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto w-full rounded-md"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={600}
                  height={600}
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>
